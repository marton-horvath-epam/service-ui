111fbf129d7408d455f7ca9b2d2c8c1f
'use strict';var _constants = require('./constants');
var _reducer = require('./reducer');

describe('fetch', function () {
  test('should return initial state', function () {
    var reducer = (0, _reducer.fetchReducer)('test');
    expect(reducer(undefined, {})).toBe(_constants.INITIAL_STATE);
  });

  test('should return old state on unknown action', function () {
    var reducer = (0, _reducer.fetchReducer)('test');
    var oldState = { foo: 1 };
    expect(reducer(oldState, { type: 'foo' })).toBe(oldState);
  });

  test('should support setting initial state', function () {
    var initialState = {};
    var reducer = (0, _reducer.fetchReducer)('test', { initialState: initialState });
    expect(reducer(undefined, {})).toBe(initialState);
  });

  test('should return old state on unknown namespace', function () {
    var reducer = (0, _reducer.fetchReducer)('test');
    var oldState = { foo: 1 };
    expect(
    reducer(oldState, {
      type: _constants.FETCH_SUCCESS,
      payload: { foo: 2 },
      meta: { namespace: 'foo' } })).

    toBe(oldState);
  });

  test('should handle FETCH_SUCCESS', function () {
    var initialState = {};
    var reducer = (0, _reducer.fetchReducer)('test', { initialState: initialState });
    expect(
    reducer(initialState, {
      type: _constants.FETCH_SUCCESS,
      payload: { foo: 1 },
      meta: { namespace: 'test' } })).

    toEqual({
      foo: 1 });

  });

  test('should support contentPath', function () {
    var initialState = {};
    var reducer = (0, _reducer.fetchReducer)('test', { initialState: initialState, contentPath: 'bar' });
    expect(
    reducer(initialState, {
      type: _constants.FETCH_SUCCESS,
      payload: { foo: 1, bar: { baz: 1 } },
      meta: { namespace: 'test' } })).

    toEqual({
      baz: 1 });

  });
});;var _temp = function () {if (typeof __REACT_HOT_LOADER__ === 'undefined') {return;}}();;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlZHVjZXIudGVzdC5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsInRlc3QiLCJyZWR1Y2VyIiwiZXhwZWN0IiwidW5kZWZpbmVkIiwidG9CZSIsIklOSVRJQUxfU1RBVEUiLCJvbGRTdGF0ZSIsImZvbyIsInR5cGUiLCJpbml0aWFsU3RhdGUiLCJGRVRDSF9TVUNDRVNTIiwicGF5bG9hZCIsIm1ldGEiLCJuYW1lc3BhY2UiLCJ0b0VxdWFsIiwiY29udGVudFBhdGgiLCJiYXIiLCJiYXoiXSwibWFwcGluZ3MiOiJhQUFBO0FBQ0E7O0FBRUFBLFNBQVMsT0FBVCxFQUFrQixZQUFNO0FBQ3RCQyxPQUFLLDZCQUFMLEVBQW9DLFlBQU07QUFDeEMsUUFBTUMsVUFBVSwyQkFBYSxNQUFiLENBQWhCO0FBQ0FDLFdBQU9ELFFBQVFFLFNBQVIsRUFBbUIsRUFBbkIsQ0FBUCxFQUErQkMsSUFBL0IsQ0FBb0NDLHdCQUFwQztBQUNELEdBSEQ7O0FBS0FMLE9BQUssMkNBQUwsRUFBa0QsWUFBTTtBQUN0RCxRQUFNQyxVQUFVLDJCQUFhLE1BQWIsQ0FBaEI7QUFDQSxRQUFNSyxXQUFXLEVBQUVDLEtBQUssQ0FBUCxFQUFqQjtBQUNBTCxXQUFPRCxRQUFRSyxRQUFSLEVBQWtCLEVBQUVFLE1BQU0sS0FBUixFQUFsQixDQUFQLEVBQTJDSixJQUEzQyxDQUFnREUsUUFBaEQ7QUFDRCxHQUpEOztBQU1BTixPQUFLLHNDQUFMLEVBQTZDLFlBQU07QUFDakQsUUFBTVMsZUFBZSxFQUFyQjtBQUNBLFFBQU1SLFVBQVUsMkJBQWEsTUFBYixFQUFxQixFQUFFUSwwQkFBRixFQUFyQixDQUFoQjtBQUNBUCxXQUFPRCxRQUFRRSxTQUFSLEVBQW1CLEVBQW5CLENBQVAsRUFBK0JDLElBQS9CLENBQW9DSyxZQUFwQztBQUNELEdBSkQ7O0FBTUFULE9BQUssOENBQUwsRUFBcUQsWUFBTTtBQUN6RCxRQUFNQyxVQUFVLDJCQUFhLE1BQWIsQ0FBaEI7QUFDQSxRQUFNSyxXQUFXLEVBQUVDLEtBQUssQ0FBUCxFQUFqQjtBQUNBTDtBQUNFRCxZQUFRSyxRQUFSLEVBQWtCO0FBQ2hCRSxZQUFNRSx3QkFEVTtBQUVoQkMsZUFBUyxFQUFFSixLQUFLLENBQVAsRUFGTztBQUdoQkssWUFBTSxFQUFFQyxXQUFXLEtBQWIsRUFIVSxFQUFsQixDQURGOztBQU1FVCxRQU5GLENBTU9FLFFBTlA7QUFPRCxHQVZEOztBQVlBTixPQUFLLDZCQUFMLEVBQW9DLFlBQU07QUFDeEMsUUFBTVMsZUFBZSxFQUFyQjtBQUNBLFFBQU1SLFVBQVUsMkJBQWEsTUFBYixFQUFxQixFQUFFUSwwQkFBRixFQUFyQixDQUFoQjtBQUNBUDtBQUNFRCxZQUFRUSxZQUFSLEVBQXNCO0FBQ3BCRCxZQUFNRSx3QkFEYztBQUVwQkMsZUFBUyxFQUFFSixLQUFLLENBQVAsRUFGVztBQUdwQkssWUFBTSxFQUFFQyxXQUFXLE1BQWIsRUFIYyxFQUF0QixDQURGOztBQU1FQyxXQU5GLENBTVU7QUFDUlAsV0FBSyxDQURHLEVBTlY7O0FBU0QsR0FaRDs7QUFjQVAsT0FBSyw0QkFBTCxFQUFtQyxZQUFNO0FBQ3ZDLFFBQU1TLGVBQWUsRUFBckI7QUFDQSxRQUFNUixVQUFVLDJCQUFhLE1BQWIsRUFBcUIsRUFBRVEsMEJBQUYsRUFBZ0JNLGFBQWEsS0FBN0IsRUFBckIsQ0FBaEI7QUFDQWI7QUFDRUQsWUFBUVEsWUFBUixFQUFzQjtBQUNwQkQsWUFBTUUsd0JBRGM7QUFFcEJDLGVBQVMsRUFBRUosS0FBSyxDQUFQLEVBQVVTLEtBQUssRUFBRUMsS0FBSyxDQUFQLEVBQWYsRUFGVztBQUdwQkwsWUFBTSxFQUFFQyxXQUFXLE1BQWIsRUFIYyxFQUF0QixDQURGOztBQU1FQyxXQU5GLENBTVU7QUFDUkcsV0FBSyxDQURHLEVBTlY7O0FBU0QsR0FaRDtBQWFELENBekRELEUiLCJmaWxlIjoicmVkdWNlci50ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRkVUQ0hfU1VDQ0VTUywgSU5JVElBTF9TVEFURSB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IGZldGNoUmVkdWNlciB9IGZyb20gJy4vcmVkdWNlcic7XG5cbmRlc2NyaWJlKCdmZXRjaCcsICgpID0+IHtcbiAgdGVzdCgnc2hvdWxkIHJldHVybiBpbml0aWFsIHN0YXRlJywgKCkgPT4ge1xuICAgIGNvbnN0IHJlZHVjZXIgPSBmZXRjaFJlZHVjZXIoJ3Rlc3QnKTtcbiAgICBleHBlY3QocmVkdWNlcih1bmRlZmluZWQsIHt9KSkudG9CZShJTklUSUFMX1NUQVRFKTtcbiAgfSk7XG5cbiAgdGVzdCgnc2hvdWxkIHJldHVybiBvbGQgc3RhdGUgb24gdW5rbm93biBhY3Rpb24nLCAoKSA9PiB7XG4gICAgY29uc3QgcmVkdWNlciA9IGZldGNoUmVkdWNlcigndGVzdCcpO1xuICAgIGNvbnN0IG9sZFN0YXRlID0geyBmb286IDEgfTtcbiAgICBleHBlY3QocmVkdWNlcihvbGRTdGF0ZSwgeyB0eXBlOiAnZm9vJyB9KSkudG9CZShvbGRTdGF0ZSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3Nob3VsZCBzdXBwb3J0IHNldHRpbmcgaW5pdGlhbCBzdGF0ZScsICgpID0+IHtcbiAgICBjb25zdCBpbml0aWFsU3RhdGUgPSB7fTtcbiAgICBjb25zdCByZWR1Y2VyID0gZmV0Y2hSZWR1Y2VyKCd0ZXN0JywgeyBpbml0aWFsU3RhdGUgfSk7XG4gICAgZXhwZWN0KHJlZHVjZXIodW5kZWZpbmVkLCB7fSkpLnRvQmUoaW5pdGlhbFN0YXRlKTtcbiAgfSk7XG5cbiAgdGVzdCgnc2hvdWxkIHJldHVybiBvbGQgc3RhdGUgb24gdW5rbm93biBuYW1lc3BhY2UnLCAoKSA9PiB7XG4gICAgY29uc3QgcmVkdWNlciA9IGZldGNoUmVkdWNlcigndGVzdCcpO1xuICAgIGNvbnN0IG9sZFN0YXRlID0geyBmb286IDEgfTtcbiAgICBleHBlY3QoXG4gICAgICByZWR1Y2VyKG9sZFN0YXRlLCB7XG4gICAgICAgIHR5cGU6IEZFVENIX1NVQ0NFU1MsXG4gICAgICAgIHBheWxvYWQ6IHsgZm9vOiAyIH0sXG4gICAgICAgIG1ldGE6IHsgbmFtZXNwYWNlOiAnZm9vJyB9LFxuICAgICAgfSksXG4gICAgKS50b0JlKG9sZFN0YXRlKTtcbiAgfSk7XG5cbiAgdGVzdCgnc2hvdWxkIGhhbmRsZSBGRVRDSF9TVUNDRVNTJywgKCkgPT4ge1xuICAgIGNvbnN0IGluaXRpYWxTdGF0ZSA9IHt9O1xuICAgIGNvbnN0IHJlZHVjZXIgPSBmZXRjaFJlZHVjZXIoJ3Rlc3QnLCB7IGluaXRpYWxTdGF0ZSB9KTtcbiAgICBleHBlY3QoXG4gICAgICByZWR1Y2VyKGluaXRpYWxTdGF0ZSwge1xuICAgICAgICB0eXBlOiBGRVRDSF9TVUNDRVNTLFxuICAgICAgICBwYXlsb2FkOiB7IGZvbzogMSB9LFxuICAgICAgICBtZXRhOiB7IG5hbWVzcGFjZTogJ3Rlc3QnIH0sXG4gICAgICB9KSxcbiAgICApLnRvRXF1YWwoe1xuICAgICAgZm9vOiAxLFxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdzaG91bGQgc3VwcG9ydCBjb250ZW50UGF0aCcsICgpID0+IHtcbiAgICBjb25zdCBpbml0aWFsU3RhdGUgPSB7fTtcbiAgICBjb25zdCByZWR1Y2VyID0gZmV0Y2hSZWR1Y2VyKCd0ZXN0JywgeyBpbml0aWFsU3RhdGUsIGNvbnRlbnRQYXRoOiAnYmFyJyB9KTtcbiAgICBleHBlY3QoXG4gICAgICByZWR1Y2VyKGluaXRpYWxTdGF0ZSwge1xuICAgICAgICB0eXBlOiBGRVRDSF9TVUNDRVNTLFxuICAgICAgICBwYXlsb2FkOiB7IGZvbzogMSwgYmFyOiB7IGJhejogMSB9IH0sXG4gICAgICAgIG1ldGE6IHsgbmFtZXNwYWNlOiAndGVzdCcgfSxcbiAgICAgIH0pLFxuICAgICkudG9FcXVhbCh7XG4gICAgICBiYXo6IDEsXG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=