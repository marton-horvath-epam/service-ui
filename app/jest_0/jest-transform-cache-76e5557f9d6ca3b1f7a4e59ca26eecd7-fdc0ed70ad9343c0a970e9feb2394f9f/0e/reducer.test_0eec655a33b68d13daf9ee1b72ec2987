1c7903981372d7e40db3ea34e40c11f8
'use strict';var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);var _extends2 = require('babel-runtime/helpers/extends');var _extends3 = _interopRequireDefault(_extends2);var _reducer = require('./reducer');
var _constants = require('./constants');function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}








describe('project reducer', function () {
  describe('projectInfoReducer', function () {
    test('should return initial state', function () {
      expect((0, _reducer.projectInfoReducer)(undefined, {})).toBe(_constants.PROJECT_INFO_INITIAL_STATE);
    });

    test('should return old state on unknown action', function () {
      var oldState = { foo: 1 };
      expect((0, _reducer.projectInfoReducer)(oldState, { type: 'foo' })).toBe(oldState);
    });

    test('should handle FETCH_PROJECT_SUCCESS', function () {
      var payload = { foo: 'bar' };
      var newState = (0, _reducer.projectInfoReducer)(_constants.PROJECT_INFO_INITIAL_STATE, {
        type: _constants.FETCH_PROJECT_SUCCESS,
        payload: payload });

      expect(newState).toEqual(payload);
    });

    test('should handle UPDATE_AUTO_ANALYSIS_CONFIGURATION', function () {
      var oldState = (0, _extends3.default)({},
      _constants.PROJECT_INFO_INITIAL_STATE, {
        configuration: (0, _extends3.default)({},
        _constants.PROJECT_INFO_INITIAL_STATE.configuration, {
          analyzerConfiguration: {} }) });


      var payload = { foo: 'bar' };
      var newState = (0, _reducer.projectInfoReducer)(_constants.PROJECT_INFO_INITIAL_STATE, {
        type: _constants.UPDATE_AUTO_ANALYSIS_CONFIGURATION,
        payload: payload });

      expect(newState).toEqual((0, _extends3.default)({},
      oldState, {
        configuration: (0, _extends3.default)({},
        oldState.configuration, {
          analyzerConfiguration: payload }) }));


    });
  });

  describe('projectPreferencesReducer', function () {
    test('should return initial state', function () {
      expect((0, _reducer.projectPreferencesReducer)(undefined, {})).toBe(_constants.PROJECT_PREFERENCES_INITIAL_STATE);
    });

    test('should return old state on unknown action', function () {
      var oldState = { filters: ['filter1'] };
      expect((0, _reducer.projectPreferencesReducer)(oldState, { type: 'foo' })).toBe(oldState);
    });

    test('shoud handle FETCH_PROJECT_PREFERENCES_SUCCESS', function () {
      var payload = { filters: ['filter1'] };
      var newState = (0, _reducer.projectPreferencesReducer)(_constants.PROJECT_INFO_INITIAL_STATE, {
        type: _constants.FETCH_PROJECT_PREFERENCES_SUCCESS,
        payload: payload });

      expect(newState).toEqual(payload);
    });

    test('should handle TOGGLE_DISPLAY_FILTER_ON_LAUNCHES', function () {
      var oldState = (0, _extends3.default)({},
      _constants.PROJECT_PREFERENCES_INITIAL_STATE, {
        filters: ['filter0'] });

      var payload = 'filter1';
      var stateWithFilter = (0, _reducer.projectPreferencesReducer)(oldState, {
        type: _constants.TOGGLE_DISPLAY_FILTER_ON_LAUNCHES,
        payload: payload });

      expect(stateWithFilter).toEqual((0, _extends3.default)({},
      oldState, {
        filters: [].concat((0, _toConsumableArray3.default)(oldState.filters), [payload]) }));

      var stateWithoutFilter = (0, _reducer.projectPreferencesReducer)(stateWithFilter, {
        type: _constants.TOGGLE_DISPLAY_FILTER_ON_LAUNCHES,
        payload: payload });

      expect(stateWithoutFilter).toEqual(oldState);
    });
  });
});;var _temp = function () {if (typeof __REACT_HOT_LOADER__ === 'undefined') {return;}}();;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlZHVjZXIudGVzdC5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsInRlc3QiLCJleHBlY3QiLCJ1bmRlZmluZWQiLCJ0b0JlIiwiUFJPSkVDVF9JTkZPX0lOSVRJQUxfU1RBVEUiLCJvbGRTdGF0ZSIsImZvbyIsInR5cGUiLCJwYXlsb2FkIiwibmV3U3RhdGUiLCJGRVRDSF9QUk9KRUNUX1NVQ0NFU1MiLCJ0b0VxdWFsIiwiY29uZmlndXJhdGlvbiIsImFuYWx5emVyQ29uZmlndXJhdGlvbiIsIlVQREFURV9BVVRPX0FOQUxZU0lTX0NPTkZJR1VSQVRJT04iLCJQUk9KRUNUX1BSRUZFUkVOQ0VTX0lOSVRJQUxfU1RBVEUiLCJmaWx0ZXJzIiwiRkVUQ0hfUFJPSkVDVF9QUkVGRVJFTkNFU19TVUNDRVNTIiwic3RhdGVXaXRoRmlsdGVyIiwiVE9HR0xFX0RJU1BMQVlfRklMVEVSX09OX0xBVU5DSEVTIiwic3RhdGVXaXRob3V0RmlsdGVyIl0sIm1hcHBpbmdzIjoiMlFBQUE7QUFDQSx3Qzs7Ozs7Ozs7O0FBU0FBLFNBQVMsaUJBQVQsRUFBNEIsWUFBTTtBQUNoQ0EsV0FBUyxvQkFBVCxFQUErQixZQUFNO0FBQ25DQyxTQUFLLDZCQUFMLEVBQW9DLFlBQU07QUFDeENDLGFBQU8saUNBQW1CQyxTQUFuQixFQUE4QixFQUE5QixDQUFQLEVBQTBDQyxJQUExQyxDQUErQ0MscUNBQS9DO0FBQ0QsS0FGRDs7QUFJQUosU0FBSywyQ0FBTCxFQUFrRCxZQUFNO0FBQ3RELFVBQU1LLFdBQVcsRUFBRUMsS0FBSyxDQUFQLEVBQWpCO0FBQ0FMLGFBQU8saUNBQW1CSSxRQUFuQixFQUE2QixFQUFFRSxNQUFNLEtBQVIsRUFBN0IsQ0FBUCxFQUFzREosSUFBdEQsQ0FBMkRFLFFBQTNEO0FBQ0QsS0FIRDs7QUFLQUwsU0FBSyxxQ0FBTCxFQUE0QyxZQUFNO0FBQ2hELFVBQU1RLFVBQVUsRUFBRUYsS0FBSyxLQUFQLEVBQWhCO0FBQ0EsVUFBTUcsV0FBVyxpQ0FBbUJMLHFDQUFuQixFQUErQztBQUM5REcsY0FBTUcsZ0NBRHdEO0FBRTlERix3QkFGOEQsRUFBL0MsQ0FBakI7O0FBSUFQLGFBQU9RLFFBQVAsRUFBaUJFLE9BQWpCLENBQXlCSCxPQUF6QjtBQUNELEtBUEQ7O0FBU0FSLFNBQUssa0RBQUwsRUFBeUQsWUFBTTtBQUM3RCxVQUFNSztBQUNERCwyQ0FEQztBQUVKUTtBQUNLUiw4Q0FBMkJRLGFBRGhDO0FBRUVDLGlDQUF1QixFQUZ6QixHQUZJLEdBQU47OztBQU9BLFVBQU1MLFVBQVUsRUFBRUYsS0FBSyxLQUFQLEVBQWhCO0FBQ0EsVUFBTUcsV0FBVyxpQ0FBbUJMLHFDQUFuQixFQUErQztBQUM5REcsY0FBTU8sNkNBRHdEO0FBRTlETix3QkFGOEQsRUFBL0MsQ0FBakI7O0FBSUFQLGFBQU9RLFFBQVAsRUFBaUJFLE9BQWpCO0FBQ0tOLGNBREw7QUFFRU87QUFDS1AsaUJBQVNPLGFBRGQ7QUFFRUMsaUNBQXVCTCxPQUZ6QixHQUZGOzs7QUFPRCxLQXBCRDtBQXFCRCxHQXhDRDs7QUEwQ0FULFdBQVMsMkJBQVQsRUFBc0MsWUFBTTtBQUMxQ0MsU0FBSyw2QkFBTCxFQUFvQyxZQUFNO0FBQ3hDQyxhQUFPLHdDQUEwQkMsU0FBMUIsRUFBcUMsRUFBckMsQ0FBUCxFQUFpREMsSUFBakQsQ0FBc0RZLDRDQUF0RDtBQUNELEtBRkQ7O0FBSUFmLFNBQUssMkNBQUwsRUFBa0QsWUFBTTtBQUN0RCxVQUFNSyxXQUFXLEVBQUVXLFNBQVMsQ0FBQyxTQUFELENBQVgsRUFBakI7QUFDQWYsYUFBTyx3Q0FBMEJJLFFBQTFCLEVBQW9DLEVBQUVFLE1BQU0sS0FBUixFQUFwQyxDQUFQLEVBQTZESixJQUE3RCxDQUFrRUUsUUFBbEU7QUFDRCxLQUhEOztBQUtBTCxTQUFLLGdEQUFMLEVBQXVELFlBQU07QUFDM0QsVUFBTVEsVUFBVSxFQUFFUSxTQUFTLENBQUMsU0FBRCxDQUFYLEVBQWhCO0FBQ0EsVUFBTVAsV0FBVyx3Q0FBMEJMLHFDQUExQixFQUFzRDtBQUNyRUcsY0FBTVUsNENBRCtEO0FBRXJFVCx3QkFGcUUsRUFBdEQsQ0FBakI7O0FBSUFQLGFBQU9RLFFBQVAsRUFBaUJFLE9BQWpCLENBQXlCSCxPQUF6QjtBQUNELEtBUEQ7O0FBU0FSLFNBQUssaURBQUwsRUFBd0QsWUFBTTtBQUM1RCxVQUFNSztBQUNEVSxrREFEQztBQUVKQyxpQkFBUyxDQUFDLFNBQUQsQ0FGTCxHQUFOOztBQUlBLFVBQU1SLFVBQVUsU0FBaEI7QUFDQSxVQUFNVSxrQkFBa0Isd0NBQTBCYixRQUExQixFQUFvQztBQUMxREUsY0FBTVksNENBRG9EO0FBRTFEWCx3QkFGMEQsRUFBcEMsQ0FBeEI7O0FBSUFQLGFBQU9pQixlQUFQLEVBQXdCUCxPQUF4QjtBQUNLTixjQURMO0FBRUVXLDREQUFhWCxTQUFTVyxPQUF0QixJQUErQlIsT0FBL0IsRUFGRjs7QUFJQSxVQUFNWSxxQkFBcUIsd0NBQTBCRixlQUExQixFQUEyQztBQUNwRVgsY0FBTVksNENBRDhEO0FBRXBFWCx3QkFGb0UsRUFBM0MsQ0FBM0I7O0FBSUFQLGFBQU9tQixrQkFBUCxFQUEyQlQsT0FBM0IsQ0FBbUNOLFFBQW5DO0FBQ0QsS0FuQkQ7QUFvQkQsR0F2Q0Q7QUF3Q0QsQ0FuRkQsRSIsImZpbGUiOiJyZWR1Y2VyLnRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwcm9qZWN0SW5mb1JlZHVjZXIsIHByb2plY3RQcmVmZXJlbmNlc1JlZHVjZXIgfSBmcm9tICcuL3JlZHVjZXInO1xuaW1wb3J0IHtcbiAgUFJPSkVDVF9JTkZPX0lOSVRJQUxfU1RBVEUsXG4gIFBST0pFQ1RfUFJFRkVSRU5DRVNfSU5JVElBTF9TVEFURSxcbiAgRkVUQ0hfUFJPSkVDVF9TVUNDRVNTLFxuICBVUERBVEVfQVVUT19BTkFMWVNJU19DT05GSUdVUkFUSU9OLFxuICBGRVRDSF9QUk9KRUNUX1BSRUZFUkVOQ0VTX1NVQ0NFU1MsXG4gIFRPR0dMRV9ESVNQTEFZX0ZJTFRFUl9PTl9MQVVOQ0hFUyxcbn0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5kZXNjcmliZSgncHJvamVjdCByZWR1Y2VyJywgKCkgPT4ge1xuICBkZXNjcmliZSgncHJvamVjdEluZm9SZWR1Y2VyJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCByZXR1cm4gaW5pdGlhbCBzdGF0ZScsICgpID0+IHtcbiAgICAgIGV4cGVjdChwcm9qZWN0SW5mb1JlZHVjZXIodW5kZWZpbmVkLCB7fSkpLnRvQmUoUFJPSkVDVF9JTkZPX0lOSVRJQUxfU1RBVEUpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHJldHVybiBvbGQgc3RhdGUgb24gdW5rbm93biBhY3Rpb24nLCAoKSA9PiB7XG4gICAgICBjb25zdCBvbGRTdGF0ZSA9IHsgZm9vOiAxIH07XG4gICAgICBleHBlY3QocHJvamVjdEluZm9SZWR1Y2VyKG9sZFN0YXRlLCB7IHR5cGU6ICdmb28nIH0pKS50b0JlKG9sZFN0YXRlKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgRkVUQ0hfUFJPSkVDVF9TVUNDRVNTJywgKCkgPT4ge1xuICAgICAgY29uc3QgcGF5bG9hZCA9IHsgZm9vOiAnYmFyJyB9O1xuICAgICAgY29uc3QgbmV3U3RhdGUgPSBwcm9qZWN0SW5mb1JlZHVjZXIoUFJPSkVDVF9JTkZPX0lOSVRJQUxfU1RBVEUsIHtcbiAgICAgICAgdHlwZTogRkVUQ0hfUFJPSkVDVF9TVUNDRVNTLFxuICAgICAgICBwYXlsb2FkLFxuICAgICAgfSk7XG4gICAgICBleHBlY3QobmV3U3RhdGUpLnRvRXF1YWwocGF5bG9hZCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIFVQREFURV9BVVRPX0FOQUxZU0lTX0NPTkZJR1VSQVRJT04nLCAoKSA9PiB7XG4gICAgICBjb25zdCBvbGRTdGF0ZSA9IHtcbiAgICAgICAgLi4uUFJPSkVDVF9JTkZPX0lOSVRJQUxfU1RBVEUsXG4gICAgICAgIGNvbmZpZ3VyYXRpb246IHtcbiAgICAgICAgICAuLi5QUk9KRUNUX0lORk9fSU5JVElBTF9TVEFURS5jb25maWd1cmF0aW9uLFxuICAgICAgICAgIGFuYWx5emVyQ29uZmlndXJhdGlvbjoge30sXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgICAgY29uc3QgcGF5bG9hZCA9IHsgZm9vOiAnYmFyJyB9O1xuICAgICAgY29uc3QgbmV3U3RhdGUgPSBwcm9qZWN0SW5mb1JlZHVjZXIoUFJPSkVDVF9JTkZPX0lOSVRJQUxfU1RBVEUsIHtcbiAgICAgICAgdHlwZTogVVBEQVRFX0FVVE9fQU5BTFlTSVNfQ09ORklHVVJBVElPTixcbiAgICAgICAgcGF5bG9hZCxcbiAgICAgIH0pO1xuICAgICAgZXhwZWN0KG5ld1N0YXRlKS50b0VxdWFsKHtcbiAgICAgICAgLi4ub2xkU3RhdGUsXG4gICAgICAgIGNvbmZpZ3VyYXRpb246IHtcbiAgICAgICAgICAuLi5vbGRTdGF0ZS5jb25maWd1cmF0aW9uLFxuICAgICAgICAgIGFuYWx5emVyQ29uZmlndXJhdGlvbjogcGF5bG9hZCxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgncHJvamVjdFByZWZlcmVuY2VzUmVkdWNlcicsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgcmV0dXJuIGluaXRpYWwgc3RhdGUnLCAoKSA9PiB7XG4gICAgICBleHBlY3QocHJvamVjdFByZWZlcmVuY2VzUmVkdWNlcih1bmRlZmluZWQsIHt9KSkudG9CZShQUk9KRUNUX1BSRUZFUkVOQ0VTX0lOSVRJQUxfU1RBVEUpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHJldHVybiBvbGQgc3RhdGUgb24gdW5rbm93biBhY3Rpb24nLCAoKSA9PiB7XG4gICAgICBjb25zdCBvbGRTdGF0ZSA9IHsgZmlsdGVyczogWydmaWx0ZXIxJ10gfTtcbiAgICAgIGV4cGVjdChwcm9qZWN0UHJlZmVyZW5jZXNSZWR1Y2VyKG9sZFN0YXRlLCB7IHR5cGU6ICdmb28nIH0pKS50b0JlKG9sZFN0YXRlKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VkIGhhbmRsZSBGRVRDSF9QUk9KRUNUX1BSRUZFUkVOQ0VTX1NVQ0NFU1MnLCAoKSA9PiB7XG4gICAgICBjb25zdCBwYXlsb2FkID0geyBmaWx0ZXJzOiBbJ2ZpbHRlcjEnXSB9O1xuICAgICAgY29uc3QgbmV3U3RhdGUgPSBwcm9qZWN0UHJlZmVyZW5jZXNSZWR1Y2VyKFBST0pFQ1RfSU5GT19JTklUSUFMX1NUQVRFLCB7XG4gICAgICAgIHR5cGU6IEZFVENIX1BST0pFQ1RfUFJFRkVSRU5DRVNfU1VDQ0VTUyxcbiAgICAgICAgcGF5bG9hZCxcbiAgICAgIH0pO1xuICAgICAgZXhwZWN0KG5ld1N0YXRlKS50b0VxdWFsKHBheWxvYWQpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBUT0dHTEVfRElTUExBWV9GSUxURVJfT05fTEFVTkNIRVMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBvbGRTdGF0ZSA9IHtcbiAgICAgICAgLi4uUFJPSkVDVF9QUkVGRVJFTkNFU19JTklUSUFMX1NUQVRFLFxuICAgICAgICBmaWx0ZXJzOiBbJ2ZpbHRlcjAnXSxcbiAgICAgIH07XG4gICAgICBjb25zdCBwYXlsb2FkID0gJ2ZpbHRlcjEnO1xuICAgICAgY29uc3Qgc3RhdGVXaXRoRmlsdGVyID0gcHJvamVjdFByZWZlcmVuY2VzUmVkdWNlcihvbGRTdGF0ZSwge1xuICAgICAgICB0eXBlOiBUT0dHTEVfRElTUExBWV9GSUxURVJfT05fTEFVTkNIRVMsXG4gICAgICAgIHBheWxvYWQsXG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChzdGF0ZVdpdGhGaWx0ZXIpLnRvRXF1YWwoe1xuICAgICAgICAuLi5vbGRTdGF0ZSxcbiAgICAgICAgZmlsdGVyczogWy4uLm9sZFN0YXRlLmZpbHRlcnMsIHBheWxvYWRdLFxuICAgICAgfSk7XG4gICAgICBjb25zdCBzdGF0ZVdpdGhvdXRGaWx0ZXIgPSBwcm9qZWN0UHJlZmVyZW5jZXNSZWR1Y2VyKHN0YXRlV2l0aEZpbHRlciwge1xuICAgICAgICB0eXBlOiBUT0dHTEVfRElTUExBWV9GSUxURVJfT05fTEFVTkNIRVMsXG4gICAgICAgIHBheWxvYWQsXG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChzdGF0ZVdpdGhvdXRGaWx0ZXIpLnRvRXF1YWwob2xkU3RhdGUpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19