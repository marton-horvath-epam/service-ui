861d71a10e82c476c7a5cf7916299551
'use strict';var _typeof2 = require('babel-runtime/helpers/typeof');var _typeof3 = _interopRequireDefault(_typeof2);var _timeDateUtils = require('./timeDateUtils');function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}








var NOW = Date.now();
var ONE_SECOND = 1000;
var ONE_MINUTE = 60 * 1000;
var ONE_HOUR = 3600 * 1000;
var ONE_DAY = 24 * 3600 * 1000;

describe('getDuration', function () {
  test('should return string', function () {
    expect((0, _typeof3.default)((0, _timeDateUtils.getDuration)(NOW, NOW + ONE_HOUR))).toBe('string');
  });

  test('should return "0s" in case of the same start and end', function () {
    expect((0, _timeDateUtils.getDuration)(NOW, NOW)).toBe('0s');
  });

  test('should return "20s" in case of the time difference between start and end is 20 seconds', function () {
    expect((0, _timeDateUtils.getDuration)(NOW, NOW + ONE_SECOND * 20)).toEqual('20s');
  });
  test('should return "20m" in case of the time difference between start and end is 20 minutes', function () {
    expect((0, _timeDateUtils.getDuration)(NOW, NOW + ONE_MINUTE * 20)).toEqual('20m');
  });
  test('should return "20h" in case of the time difference between start and end is 20 hours', function () {
    expect((0, _timeDateUtils.getDuration)(NOW, NOW + ONE_HOUR * 20)).toEqual('20h');
  });
  test('should return "20d" in case of the time difference between start and end is 20 days', function () {
    expect((0, _timeDateUtils.getDuration)(NOW, NOW + ONE_DAY * 20)).toEqual('20d');
  });
  test('should return "20d 20h 20m" in case of the time difference between start and end is 20 days, 20 hours 20 minutes and 20 seconds', function () {
    expect((0, _timeDateUtils.getDuration)(NOW, NOW + (ONE_DAY + ONE_HOUR + ONE_MINUTE + ONE_SECOND) * 20)).toEqual(
    '20d 20h 20m');

  });
  test('should return "20m 20s" in case of the time difference between start and end is 20 minutes and 20 seconds', function () {
    expect((0, _timeDateUtils.getDuration)(NOW, NOW + (ONE_MINUTE + ONE_SECOND) * 20)).toEqual('20m 20s');
  });
});

describe('approximateTimeFormat', function () {
  test('should return sting', function () {
    expect((0, _typeof3.default)((0, _timeDateUtils.approximateTimeFormat)(NOW + ONE_HOUR))).toBe('string');
  });

  test('should return "0s" in case of 0 timestamp (in seconds) is passed as argument', function () {
    expect((0, _timeDateUtils.approximateTimeFormat)(0)).toEqual('0s');
  });

  test('should return "20s" in case of the 20 seconds timestamp (in seconds) is passed as argument', function () {
    expect((0, _timeDateUtils.approximateTimeFormat)(ONE_SECOND / 1000 * 20)).toEqual('20s');
  });
  test('should return "20m" in case of the 20 minutes timestamp (in seconds) is passed as argument', function () {
    expect((0, _timeDateUtils.approximateTimeFormat)(ONE_MINUTE / 1000 * 20)).toEqual('20m');
  });
  test('should return "20h" in case of the 20 hours timestamp (in seconds) is passed as argument', function () {
    expect((0, _timeDateUtils.approximateTimeFormat)(ONE_HOUR / 1000 * 20)).toEqual('20h');
  });
  test('should return "20d" in case of the 20 days timestamp (in seconds) is passed as argument', function () {
    expect((0, _timeDateUtils.approximateTimeFormat)(ONE_DAY / 1000 * 20)).toEqual('20d');
  });
  test('should return "20d 20h 20m" in case of the 20 days, 20 hours 20 minutes and 20 seconds timestamp (in seconds) is passed as argument', function () {
    expect(
    (0, _timeDateUtils.approximateTimeFormat)((ONE_DAY + ONE_HOUR + ONE_MINUTE + ONE_SECOND) / 1000 * 20)).
    toEqual('20d 20h 20m');
  });
});

describe('dateFormat', function () {
  test('should return sting', function () {
    expect((0, _typeof3.default)((0, _timeDateUtils.dateFormat)(0))).toBe('string');
  });
  test('should match match date pattern "@@@@-@@-@@ @@:@@:@@"', function () {
    expect((0, _timeDateUtils.dateFormat)(0)).toMatch(/^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$/);
  });
  test('should contain UTC offset after date in case second argument is true.', function () {
    expect((0, _timeDateUtils.dateFormat)(0, true)).toMatch(
    /^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2} UTC[+-]{0,1}[0-9]{1,2}$/);

  });
});

describe('daysBetween', function () {
  test('should return number', function () {
    expect((0, _typeof3.default)((0, _timeDateUtils.daysBetween)(new Date(), new Date()))).toBe('number');
  });
  test('should return 0 for equal Dates', function () {
    expect((0, _timeDateUtils.daysBetween)(new Date(), new Date())).toEqual(0);
    expect((0, _timeDateUtils.daysBetween)(new Date(2018, 0, 1), new Date(2018, 0, 1))).toEqual(0);
  });
  test('should return 365 for dates with a year difference', function () {
    expect((0, _timeDateUtils.daysBetween)(new Date(2017, 0, 1), new Date(2018, 0, 1))).toEqual(365);
  });
});

describe('getTimestampFromMinutes', function () {
  test('should return number', function () {
    expect((0, _typeof3.default)((0, _timeDateUtils.getTimestampFromMinutes)(20))).toBe('number');
  });
});

describe('getMinutesFromTimestamp', function () {
  test('should return number', function () {
    expect((0, _typeof3.default)((0, _timeDateUtils.getMinutesFromTimestamp)(1514754000000))).toBe('number');
  });
});;var _temp = function () {if (typeof __REACT_HOT_LOADER__ === 'undefined') {return;}__REACT_HOT_LOADER__.register(NOW, 'NOW', '/volumeC/workspace/service-ui - RELEASE/src/github.com/reportportal/service-ui/app/src/common/utils/timeDateUtils.test.js');__REACT_HOT_LOADER__.register(ONE_SECOND, 'ONE_SECOND', '/volumeC/workspace/service-ui - RELEASE/src/github.com/reportportal/service-ui/app/src/common/utils/timeDateUtils.test.js');__REACT_HOT_LOADER__.register(ONE_MINUTE, 'ONE_MINUTE', '/volumeC/workspace/service-ui - RELEASE/src/github.com/reportportal/service-ui/app/src/common/utils/timeDateUtils.test.js');__REACT_HOT_LOADER__.register(ONE_HOUR, 'ONE_HOUR', '/volumeC/workspace/service-ui - RELEASE/src/github.com/reportportal/service-ui/app/src/common/utils/timeDateUtils.test.js');__REACT_HOT_LOADER__.register(ONE_DAY, 'ONE_DAY', '/volumeC/workspace/service-ui - RELEASE/src/github.com/reportportal/service-ui/app/src/common/utils/timeDateUtils.test.js');}();;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,