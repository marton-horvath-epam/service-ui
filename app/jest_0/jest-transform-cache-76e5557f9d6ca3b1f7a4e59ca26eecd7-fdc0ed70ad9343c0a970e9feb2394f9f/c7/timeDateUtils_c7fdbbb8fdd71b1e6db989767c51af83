83d6ab447820e0cddcc241e43474f5c7
'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.getMinutesFromTimestamp = exports.getTimestampFromMinutes = exports.utcOffset = exports.daysBetween = exports.daysFromNow = exports.fromNowFormat = exports.dateFormat = exports.approximateTimeFormat = exports.getDuration = undefined;




















var _moment = require('moment');var _moment2 = _interopRequireDefault(_moment);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var getTimeUnits = function getTimeUnits(time) {
  var days = Math.floor(time / 86400);
  var hours = Math.floor((time - days * 86400) / 3600);
  var minutes = Math.floor((time - days * 86400 - hours * 3600) / 60);
  var seconds = time - days * 86400 - hours * 3600 - minutes * 60;
  return {
    days: days,
    hours: hours,
    minutes: minutes,
    seconds: seconds };

}; /*
    * Copyright 2017 EPAM Systems
    *
    *
    * This file is part of EPAM Report Portal.
    * https://github.com/reportportal/service-ui
    *
    * Report Portal is free software: you can redistribute it and/or modify
    * it under the terms of the GNU General Public License as published by
    * the Free Software Foundation, either version 3 of the License, or
    * (at your option) any later version.
    *
    * Report Portal is distributed in the hope that it will be useful,
    * but WITHOUT ANY WARRANTY; without even the implied warranty of
    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    * GNU General Public License for more details.
    *
    * You should have received a copy of the GNU General Public License
    * along with Report Portal.  If not, see <http://www.gnu.org/licenses/>.
    */var getDuration = exports.getDuration = function getDuration(start, end, isThreeDecimalPlaces) {var secDuration = parseInt((end - start) / 1000, 10);var _getTimeUnits = getTimeUnits(secDuration),days = _getTimeUnits.days,hours = _getTimeUnits.hours,minutes = _getTimeUnits.minutes,seconds = _getTimeUnits.seconds;var result = '';if (days > 0) {result = result + days + 'd ';}if (hours > 0) {result = result + hours + 'h ';}if (minutes > 0) {result = result + minutes + 'm';if (!days && !hours && seconds) {result += ' ' + seconds + 's';}}if (result === '' && seconds > 0) {
    result = seconds + 's';
  } else if (result === '' && seconds === 0) {
    result = isThreeDecimalPlaces ?
    (end - start) / 1000 + 's' :
    Math.round((end - start) / 10) / 100 + 's';
  }
  return result.trim();
};

var approximateTimeFormat = exports.approximateTimeFormat = function approximateTimeFormat(time) {var _getTimeUnits2 =
  getTimeUnits(time),days = _getTimeUnits2.days,hours = _getTimeUnits2.hours,minutes = _getTimeUnits2.minutes,seconds = _getTimeUnits2.seconds;
  var result = '';

  if (days > 0) {
    result = result + days + 'd ';
  }
  if (hours > 0) {
    result = result + hours + 'h ';
  }
  if (minutes > 0) {
    result = result + minutes + 'm';
  }
  if (result === '' && seconds > 0) {
    result = seconds + 's';
  } else if (result === '' && seconds === 0) {
    result = Math.round(time / 10) / 100 + 's';
  }
  return result.trim();
};

var dateFormat = exports.dateFormat = function dateFormat(val, withUtc) {
  var date = new Date(val);
  var month = date.getMonth() + 1;
  var day = date.getDate();
  var hour = date.getHours();
  var minute = date.getMinutes();
  var second = date.getSeconds();
  var utc = date.getTimezoneOffset() / 60 * -1;

  if (utc.toString().indexOf('-') === -1) {
    utc = 'UTC+' + utc;
  } else {
    utc = 'UTC' + utc;
  }

  // normalize value to 2 symbols string
  //   1 -> 01
  //   10 -> 10
  var normalize = function normalize(input) {
    if (String(input).length < 2) {
      return '0' + input;
    }
    return input;
  };

  return date.getFullYear() + '-' + normalize(month) + '-' + normalize(day) + ' ' + normalize(
  hour) + ':' +
  normalize(minute) + ':' + normalize(second) + (withUtc ? ' ' + utc : '');
};

var fromNowFormat = exports.fromNowFormat = function fromNowFormat(date) {return (0, _moment2.default)(date).fromNow();};

var daysFromNow = exports.daysFromNow = function daysFromNow(stamp) {return fromNowFormat(dateFormat(stamp));};

var daysBetween = exports.daysBetween = function daysBetween(date1, date2) {
  // The number of milliseconds in one day
  var ONE_DAY = 1000 * 60 * 60 * 24;
  // Calculate the difference in milliseconds
  var difference = Math.abs(date1.getTime() - date2.getTime());
  // Convert back to days and return
  return Math.round(difference / ONE_DAY);
};

var utcOffset = exports.utcOffset = new Date().getTimezoneOffset() / 60 * -1;

var getTimestampFromMinutes = exports.getTimestampFromMinutes = function getTimestampFromMinutes(minutes) {
  var currentUnix = (0, _moment2.default)().
  startOf('day').
  unix();
  return (parseInt(minutes, 10) * 60 + currentUnix) * 1000;
};

var getMinutesFromTimestamp = exports.getMinutesFromTimestamp = function getMinutesFromTimestamp(timestamp) {
  var currentUnix = (0, _moment2.default)().
  startOf('day').
  unix();
  return parseInt(((0, _moment2.default)(timestamp).unix() - currentUnix) / 60, 10);
};;var _temp = function () {if (typeof __REACT_HOT_LOADER__ === 'undefined') {return;}__REACT_HOT_LOADER__.register(getTimeUnits, 'getTimeUnits', '/volumeC/workspace/service-ui - RELEASE/src/github.com/reportportal/service-ui/app/src/common/utils/timeDateUtils.js');__REACT_HOT_LOADER__.register(getDuration, 'getDuration', '/volumeC/workspace/service-ui - RELEASE/src/github.com/reportportal/service-ui/app/src/common/utils/timeDateUtils.js');__REACT_HOT_LOADER__.register(approximateTimeFormat, 'approximateTimeFormat', '/volumeC/workspace/service-ui - RELEASE/src/github.com/reportportal/service-ui/app/src/common/utils/timeDateUtils.js');__REACT_HOT_LOADER__.register(dateFormat, 'dateFormat', '/volumeC/workspace/service-ui - RELEASE/src/github.com/reportportal/service-ui/app/src/common/utils/timeDateUtils.js');__REACT_HOT_LOADER__.register(fromNowFormat, 'fromNowFormat', '/volumeC/workspace/service-ui - RELEASE/src/github.com/reportportal/service-ui/app/src/common/utils/timeDateUtils.js');__REACT_HOT_LOADER__.register(daysFromNow, 'daysFromNow', '/volumeC/workspace/service-ui - RELEASE/src/github.com/reportportal/service-ui/app/src/common/utils/timeDateUtils.js');__REACT_HOT_LOADER__.register(daysBetween, 'daysBetween', '/volumeC/workspace/service-ui - RELEASE/src/github.com/reportportal/service-ui/app/src/common/utils/timeDateUtils.js');__REACT_HOT_LOADER__.register(utcOffset, 'utcOffset', '/volumeC/workspace/service-ui - RELEASE/src/github.com/reportportal/service-ui/app/src/common/utils/timeDateUtils.js');__REACT_HOT_LOADER__.register(getTimestampFromMinutes, 'getTimestampFromMinutes', '/volumeC/workspace/service-ui - RELEASE/src/github.com/reportportal/service-ui/app/src/common/utils/timeDateUtils.js');__REACT_HOT_LOADER__.register(getMinutesFromTimestamp, 'getMinutesFromTimestamp', '/volumeC/workspace/service-ui - RELEASE/src/github.com/reportportal/service-ui/app/src/common/utils/timeDateUtils.js');}();;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,