e4dc1e5ba2b5cc07fe11ff534eed8bc7
'use strict';var _constants = require('./constants');













var _reducer = require('./reducer');

var TEST_NAMESPACE = 'test';

describe('groupOperations reducers', function () {
  describe('lastOperationReducer', function () {
    var reducer = (0, _reducer.lastOperationReducer)(TEST_NAMESPACE);

    test('should return initial state', function () {
      expect(reducer(undefined, {})).toBe(_constants.LAST_OPERATION_INITIAL_STATE);
    });

    test('should return old state on unknown action', function () {
      var oldState = 'oldState';
      expect(reducer(oldState, { type: 'foo' })).toBe(oldState);
    });

    test('should return old state on unknown namespace', function () {
      var oldState = 'oldState';
      var newState = reducer(oldState, {
        type: _constants.SET_LAST_OPERATION_NAME,
        payload: 'foo',
        meta: {
          namespace: 'other' } });


      expect(newState).toBe(oldState);
    });

    test('should handle SET_LAST_OPERATION_NAME', function () {
      var oldState = 'oldOperation';
      var payload = 'newOperation';
      var newState = reducer(oldState, {
        type: _constants.SET_LAST_OPERATION_NAME,
        payload: payload,
        meta: {
          namespace: TEST_NAMESPACE } });


      expect(newState).toBe(payload);
    });
  });

  describe('validationErrorsReducer', function () {
    var reducer = (0, _reducer.validationErrorsReducer)(TEST_NAMESPACE);

    test('should return initial state', function () {
      expect(reducer(undefined, {})).toBe(_constants.VALIDATION_ERRORS_INITIAL_STATE);
    });

    test('should return old state on unknown action', function () {
      var oldState = 'oldState';
      expect(reducer(oldState, { type: 'foo' })).toBe(oldState);
    });

    test('should return old state on unknown namespace', function () {
      var oldState = 'oldState';
      var newState = reducer(oldState, {
        type: _constants.SET_VALIDATION_ERRORS,
        payload: { foo: 1 },
        meta: {
          namespace: 'other' } });


      expect(newState).toBe(oldState);
    });

    test('should handle SET_VALIDATION_ERRORS', function () {
      var oldState = { foo: 1 };
      var payload = { bar: 2 };
      var newState = reducer(oldState, {
        type: _constants.SET_VALIDATION_ERRORS,
        payload: payload,
        meta: {
          namespace: TEST_NAMESPACE } });


      expect(newState).toEqual(payload);
    });

    test('should handle RESET_VALIDATION_ERRORS', function () {
      var oldState = { foo: 1 };
      var newState = reducer(oldState, {
        type: _constants.RESET_VALIDATION_ERRORS,
        meta: {
          namespace: TEST_NAMESPACE } });


      expect(newState).toEqual(_constants.VALIDATION_ERRORS_INITIAL_STATE);
    });

    test('should handle REMOVE_VALIDATION_ERRORS', function () {
      var oldState = { foo: 1, bar: 2 };
      var newState = reducer(oldState, {
        type: _constants.REMOVE_VALIDATION_ERRORS,
        payload: ['foo'],
        meta: {
          namespace: TEST_NAMESPACE } });


      expect(newState).toEqual({ bar: 2 });
    });
  });

  describe('selectedItemsReducer', function () {
    var reducer = (0, _reducer.selectedItemsReducer)(TEST_NAMESPACE);

    test('should return initial state', function () {
      expect(reducer(undefined, {})).toBe(_constants.SELECTED_ITEMS_INITIAL_STATE);
    });

    test('should return old state on unknown action', function () {
      var oldState = [{ id: 1 }];
      expect(reducer(oldState, { type: 'foo' })).toBe(oldState);
    });

    test('should return old state on unknown namespace', function () {
      var oldState = [{ id: 1 }];
      var newState = reducer(oldState, {
        type: _constants.SELECT_ITEMS,
        payload: { id: 2 },
        meta: {
          namespace: 'other' } });


      expect(newState).toBe(oldState);
    });

    test('should handle SELECT_ITEMS', function () {
      var oldState = [{ id: 1 }];
      var payload = [{ id: 2 }, { id: 3 }];
      var newState = reducer(oldState, {
        type: _constants.SELECT_ITEMS,
        payload: payload,
        meta: {
          namespace: TEST_NAMESPACE } });


      expect(newState).toEqual([].concat(oldState, payload));
    });

    test('should ignore duplicate items on SELECT_ITEMS', function () {
      var oldState = [{ id: 1 }, { id: 2 }];
      var payload = [{ id: 2 }, { id: 3 }];
      var newState = reducer(oldState, {
        type: _constants.SELECT_ITEMS,
        payload: payload,
        meta: {
          namespace: TEST_NAMESPACE } });


      expect(newState).toEqual([{ id: 1 }, { id: 2 }, { id: 3 }]);
    });

    test('should handle UNSELECT_ITEMS', function () {
      var oldState = [{ id: 1 }, { id: 2 }, { id: 3 }];
      var payload = [{ id: 2 }, { id: 3 }];
      var newState = reducer(oldState, {
        type: _constants.UNSELECT_ITEMS,
        payload: payload,
        meta: {
          namespace: TEST_NAMESPACE } });


      expect(newState).toEqual([{ id: 1 }]);
    });

    describe('TOGGLE_ALL_ITEMS', function () {
      test('should add non-selected items in case there are some', function () {
        var oldState = [{ id: 1 }];
        var payload = [{ id: 1 }, { id: 2 }, { id: 3 }];
        var newState = reducer(oldState, {
          type: _constants.TOGGLE_ALL_ITEMS,
          payload: payload,
          meta: {
            namespace: TEST_NAMESPACE } });


        expect(newState).toEqual([{ id: 1 }, { id: 2 }, { id: 3 }]);
      });

      test('should unselect items in case there are no new items', function () {
        var oldState = [{ id: 1 }, { id: 2 }];
        var payload = [{ id: 1 }];
        var newState = reducer(oldState, {
          type: _constants.TOGGLE_ALL_ITEMS,
          payload: payload,
          meta: {
            namespace: TEST_NAMESPACE } });


        expect(newState).toEqual([{ id: 2 }]);
      });
    });

    test('should handle UNSELECT_ALL_ITEMS', function () {
      var oldState = [{ id: 2 }, { id: 3 }];
      var newState = reducer(oldState, {
        type: _constants.UNSELECT_ALL_ITEMS,
        meta: {
          namespace: TEST_NAMESPACE } });


      expect(newState).toEqual([]);
    });

    test('should handle TOGGLE_ITEM_SELECTION', function () {
      var oldState = [{ id: 1 }];
      var stateWithTwoItems = reducer(oldState, {
        type: _constants.TOGGLE_ITEM_SELECTION,
        payload: { id: 3 },
        meta: {
          namespace: TEST_NAMESPACE } });


      expect(stateWithTwoItems).toEqual([{ id: 1 }, { id: 3 }]);
      var stateWithOneItem = reducer(stateWithTwoItems, {
        type: _constants.TOGGLE_ITEM_SELECTION,
        payload: { id: 1 },
        meta: {
          namespace: TEST_NAMESPACE } });


      expect(stateWithOneItem).toEqual([{ id: 3 }]);
    });
  });
});;var _temp = function () {if (typeof __REACT_HOT_LOADER__ === 'undefined') {return;}__REACT_HOT_LOADER__.register(TEST_NAMESPACE, 'TEST_NAMESPACE', '/volumeC/workspace/service-ui - RELEASE/src/github.com/reportportal/service-ui/app/src/controllers/groupOperations/reducer.test.js');}();;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,